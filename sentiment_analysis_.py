# -*- coding: utf-8 -*-
"""Sentiment Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZDc58gEGC1iL1qkWpcXr-WycKGwqpJru
"""

# âœ… Step 1: Install required libraries
!pip install -U transformers datasets scikit-learn

# âœ… Step 2: Import Libraries
import pandas as pd
import torch
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from transformers import BertTokenizerFast, BertForSequenceClassification, Trainer, TrainingArguments
from transformers import DataCollatorWithPadding
from datasets import Dataset
import os

# âœ… Disable wandb logging
os.environ["WANDB_DISABLED"] = "true"

# âœ… Step 3: Load dataset
df = pd.read_csv("test.csv", encoding="latin1")
df = df[['text', 'sentiment']].dropna()
df = df[df['sentiment'].isin(['positive', 'negative', 'neutral'])]

# âœ… Step 4: Encode labels
label2id = {label: idx for idx, label in enumerate(sorted(df['sentiment'].unique()))}
id2label = {idx: label for label, idx in label2id.items()}
df['label'] = df['sentiment'].map(label2id)

# âœ… Step 5: Train-test split
train_texts, test_texts, train_labels, test_labels = train_test_split(
    df['text'].tolist(), df['label'].tolist(), test_size=0.2, random_state=42
)

# âœ… Step 6: Tokenization
tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')
train_encodings = tokenizer(train_texts, truncation=True, padding=True)
test_encodings = tokenizer(test_texts, truncation=True, padding=True)

# âœ… Step 7: Convert to Dataset
train_dataset = Dataset.from_dict({
    'input_ids': train_encodings['input_ids'],
    'attention_mask': train_encodings['attention_mask'],
    'label': train_labels
})
test_dataset = Dataset.from_dict({
    'input_ids': test_encodings['input_ids'],
    'attention_mask': test_encodings['attention_mask'],
    'label': test_labels
})

# âœ… Step 8: Load model
model = BertForSequenceClassification.from_pretrained(
    'bert-base-uncased',
    num_labels=len(label2id),
    id2label=id2label,
    label2id=label2id
)

# âœ… Step 9: Training arguments (safe, minimal)
training_args = TrainingArguments(
    output_dir='./results',
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    learning_rate=2e-5,
    logging_dir='./logs',
    logging_steps=10
)

# âœ… Step 10: Trainer setup
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

# âœ… Step 11: Train the model
trainer.train()

# âœ… Step 12: Evaluate
predictions = trainer.predict(test_dataset)
pred_labels = predictions.predictions.argmax(-1)

print("\nâœ… Accuracy:", accuracy_score(test_labels, pred_labels))
print("\nðŸ“Š Classification Report:\n", classification_report(test_labels, pred_labels, target_names=label2id.keys()))